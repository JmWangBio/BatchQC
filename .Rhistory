setwd("../")
devtools::document()
devtools::document()
devtools::install()
library(BatchQC)
BatchQC()
library(shiny)
library(shinyjs)
Batch Effects Quality Control Software
devtools::document()
devtools::install()
library(BatchQC)
BatchQC()
shiny::tags
shiny::tags$style
shiny::tags$style(appCSS)
devtools::document()
devtools::install()
library(BatchQC)
BatchQC()
devtools::document()
devtools::install()
library(BatchQC)
BatchQC()
library(animalcules)
run_animalcules()
BatchQC()
?BatchQC
load("C:/Users/Michael/Downloads/protein_example_data.rda")
View(protein_sample_info)
View(protein_data)
View(protein_data)
typeof(protein_data)
protein_data[1]
protein_data[2]
rnorm((100, 20))
rnorm(100)
rnorm(c(100, 50))
View(protein_data)
View(protein_sample_info)
View(protein_sample_info)
View(protein_data)
View(protein_sample_info)
View(protein_data)
rm(protein_data)
rm(protein_sample_info)
SummarizedExperiment()
?SummarizedExperiment
read.csv('data/protein_data.csv')
?read.csv
read.csv('data/protein_data.csv', row.names=1)
counts <- read.csv('data/protein_data.csv', row.names=1)
md <- read.csv('data/protein_md.csv')
SummarizedExperiment()
?SummarizedExperiment()
SummarizedExperiment::SummarizedExperiment(counts)
SummarizedExperiment::SummarizedExperiment(counts, metadata = md)
se <- SummarizedExperiment::SummarizedExperiment(counts, metadata = md)
View(se)
View(md)
\dontrun{
shiny::runApp('inst/shiny')
md <- read.csv('data/protein_md.csv')
md
SummarizedExperiment::SummarizedExperiment(counts, colData = md)
View(se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(SummarizedExperiment)
counts <- read.csv('~/BatchQC/data/protein_csv', row.names=1)
counts <- read.csv('~/BatchQC/data/protein_data.csv', row.names=1)
md <- read.csv('~/BatchQC/data/protein_md.csv')
View(counts)
View(md)
se <- SummarizedExperiment(counts, colData = md)
se
View(se)
?SummarizedExperiment
se$colData
s
se
se$Sample
se$Batch
se$Batch
assays(se)
assays(se)$
shiny::runApp('inst/shiny')
nrows <- 200
ncols <- 6
counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
IRanges(floor(runif(200, 1e5, 1e6)), width=100),
strand=sample(c("+", "-"), 200, TRUE),
feature_id=sprintf("ID%03d", 1:200))
colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
row.names=LETTERS[1:6])
counts
colData
rowRanges
counts <- read.csv('~/BatchQC/data/protein_data.csv', row.name=1)
md <- read.csv('~/BatchQC/data/protein_md.csv')
md
md <- read.csv('~/BatchQC/data/protein_md.csv', row.names='Sample')
View(md)
library(SummarizedExperiment)
SummarizedExperiment(counts, md)
SummarizedExperiment(counts, colData = md)
se = SummarizedExperiment(counts, colData = md)
View(se)
se$samplename
colData(se)
library(dplyr)
?group_by
group_by(colData(se))
colData(se)
as_tibble(colData(se))
group_by(as_tibble(colData(se)))
colData(se) %>% as_tibble
colData(se) %>% as_tibble %>% group_by(category)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% summarize()
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% summarize
colData(se) %>% as_tibble %>% group_by(category) %>% summarize(count(Batch))
colData(se) %>% as_tibble %>% group_by(category) %>% summarise(count(Batch))
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch)
library(tidyr)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% pivot_longer()
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% pivot_longer
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% unstack
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by(category) %>% tally()
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch)
t = colData(se) %>% as_tibble %>% group_by(category) %>% tally()
pivot_wider(t)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% pivot_wider(names_from = batch, values_from = n)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
shiny::runApp('inst/shiny')
se_input <- NULL
NULL
is.null(se_input)
if is.null(se_input){}
runApp('inst/shiny')
View(counts)
BatchQC()
runApp('inst/shiny')
assays(se)
head(assays(se))
assays(se)
assays(se)$
assays(se)
assays(se)$data
assays(se)
assays(se)$data
ingest_data <- function(counts_path, metadata_path){
# Read in counts (assuming first column is index)
counts <- read.csv(counts_path, row.names=1)
# Read in metadata
md <- read.csv(metadata_path, row.names='Sample')
# CHECK that "Sample" and "Batch" columns are in md
## ^^ Is this something that the SE handles?
# Ingest into SummarizedExperiment
se <- SummarizedExperiment(counts, colData=md)
return(se)
}
ingest_data('~/BatchQC/data/protein_data.csv')
ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
assays(se)
assays(se)$data
View(counts)
?SummarizedExperiment
SummarizedExperiment(list(counts=counts), colData=md)
se <- SummarizedExperiment(list(counts=counts), colData=md)
View(se)
assays(se)
assays(se)$counts
batch_design <- function(se, covariate){
# Create a batch design table for the provided covariate
design = colData(se) %>% as_tibble %>% group_by(covariate) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
return(design)
}
batch_design(se, 'condition')
colData(se)
colData(se) %>% as_tibble %>% group_by(covariate) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by("condition") %>% count(Batch)
covariate <- "condition"
colData(se) %>% as_tibble %>% group_by(covariate) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by("covariate") %>% count(Batch)
group_by(as_tibble(colData(se)))
group_by(as_tibble(colData(se)), covariate)
covariate
group_by(as_tibble(colData(se)), condition)
as_tibble(colData(se))
group_by(as_tibble(colData(se)), category)
squared <- function(x){}
squared <- function(x){return x^2}
squared <- function(x){return(x^2)}
squared(4)
a = 5
squared(a)
"a" + "b"
"a" * 2
group_by(as_tibble(colData(se)), as.symbol(covariate))
group_by(as_tibble(colData(se)), eval(as.symbol(covariate)))
covariate <- "category"
group_by(as_tibble(colData(se)), eval(as.symbol(covariate)))
group_by(as_tibble(colData(se)), eval(covariate))
group_by(as_tibble(colData(se)), covariate)
group_by(as_tibble(colData(se)), eval(covariate))
batch_design <- function(se, covariate){
# Create a batch design table for the provided covariate
design = colData(se) %>% as_tibble %>% group_by(eval(covariate)) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
return(design)
batch_design(se)
batch_design <- function(se, covariate){
# Create a batch design table for the provided covariate
design = colData(se) %>% as_tibble %>% group_by(eval(covariate)) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
return(design)
}
batch_design(se)
batch_design(se, "category")
colData(se) %>% as_tibble %>% group_by(eval(covariate))
colData(se) %>% as_tibble %>% group_by(eval(covariate)) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by(category) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by(eval(as.symbol(covariate))) %>% count(Batch)
colData(se) %>% as_tibble %>% group_by(eval(as.symbol(covariate))) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
se
colData(se)
colData(se) %>% head
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
source("../R/import")
source("../R/import")
source("../R/import.R")
output$summaryTable <- renderTable({
if (req(input$counts$datapath, input$md$datapath)){
se <- ingest_data(input$counts$datapath, input$md$datapath)
}
else if (req(input$se$datapath)){
### THIS NEEDS TO BE TESTED
se <- SummarizedExperiment(input$se$datapath)
}
return(colData(se) %>% head)
})
runApp('inst/shiny')
file.choose()
source("../../R/import.R")
output$summaryTable <- renderTable({
if (req(input$counts$datapath, input$md$datapath)){
se <- ingest_data(input$counts$datapath, input$md$datapath)
}
else if (req(input$se$datapath)){
### THIS NEEDS TO BE TESTED
se <- SummarizedExperiment(input$se$datapath)
}
return(colData(se) %>% head)
})
shiny::runApp('inst/shiny')
rm(batch_design())
rm(batch_design)
rm(ingest_data)
runApp('inst/shiny')
View(batch_design)
rm(batch_design)
rm(ingest_data)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp()
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
SE
se
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
View(se)
colData(se)
colData(se)$listData
values(se)
colData(se)
assays(se)
colData(se)
column(colData(se))
columns(colData(se))
names(colData(se))
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
names(colData(se)
names(colData(se))
names(colData(se))
?filter
list.filter(names(colData9se))
list.filter(names(colData(se))
list.filter(names(colData(se)))
names(colData(se)
names = names(colData(se))
names != 'Batch'
names[names != 'Batch']
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
shiny::runApp('inst/shiny')
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
batch_design(se, "category")
# Functions for importing data
library(SummarizedExperiment)
library(dplyr)
library(tidyr)
ingest_data <- function(counts_path, metadata_path){
# Read in counts (assuming first column is index)
counts <- read.csv(counts_path, row.names=1)
# Read in metadata
md <- read.csv(metadata_path, row.names='Sample')
# CHECK that "Sample" and "Batch" columns are in md
## ^^ Is this something that the SE handles?
# Ingest into SummarizedExperiment
se <- SummarizedExperiment(list(counts=counts), colData=md)
return(se)
}
batch_design <- function(se, covariate){
# Create a batch design table for the provided covariate
design = colData(se) %>% as_tibble %>% group_by(eval(as.symbol(covariate))) %>% count(Batch) %>% pivot_wider(names_from = Batch, values_from = n)
return(design)
}
> se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
> batch_design(se, "category")
\se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv') batch_design(se, "category")
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv') batch_design(se, "category")
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
batch_design(se, "category")
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
cols = names(colData(se))
covs = names[names != 'Batch']
colData(se)
names(colData(se))
cols
cols != 'Batch'
shiny::runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
