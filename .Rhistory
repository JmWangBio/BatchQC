se@assays@data[['CPM']]
input$Normalization_method='CPM'
input=list()
input$Normalization_method='CPM'
data=se@assays@data[[input$Normalization_method]]
vargenes=apply(data,1,var)
vargenes
order(vargenes,decreasing = T)
vargenes=vargenes[order(vargenes,decreasing = T)]
vargenes
cor(data)
library(pheatmap)
pheatmap(cor(data[vargenes[seq(1,500)],]))
data
cor(data[vargenes[seq(1,500)],])
(data[vargenes[seq(1,500)],])
vargenes[seq(1,500)]
(data[names(vargenes[seq(1,500)]),])
pheatmap(cor((data[names(vargenes[seq(1,500)]),])))
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(se)
saveRDS(se,'data/RNASeq_Example.rda')
a=readRDS('data/RNASeq_Example.rda')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
counts=read.csv('data/counts.csv',header = T,row.names = 1,check.names = F)
library(edgeR)
coldata=read.csv('data/metadata.csv',header = T,row.names = 1,check.names = F)
se=readRDS('data/RNASeq_Example.rda')
se=calcNormFactors.SummarizedExperiment(se)
se
se=readRDS('data/RNASeq_Example.rda')
?calcNormFactors.SummarizedExperiment()
a=calcNormFactors(counts,'TMM')
counts
counts=as.matrix(counts)
a=calcNormFactors(counts,'TMM')
a=calcNormFactors(counts,method = 'TMM')
cpm(a)
assay(se)
assayNames(se)
assayNames(se)['CPM']
assay(se)['CPM']
assay(se)[['CPM']]
assay(se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages('plotly')
se=readRDS('data/RNASeq_Example.rda')
colData(se)
a=colData(se)
View(a)
a=data.frame(a)
View(a)
runApp('inst/shiny')
runApp('inst/shiny')
library(data.table)
runApp('inst/shiny')
?data.table()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
se=readRDS('data/RNASeq_Example.rda')
data=reactivevalue$se@assays@data[[input$Normalization_method_heatmap]]
data=as.matrix(data)
data=apply(data,c(1,2),as.numeric)
data=data[rowSums(data)!=0,]
vargenes=apply(data,1,var)
vargenes=vargenes[order(vargenes,decreasing = T)]
vargenes=vargenes[seq(1,input$top_n)]
data=log(data+1)
data=data[names(vargenes),]
data=data+1
for (i in 1:nrow(data)) {
data[i,]=(data[i,]-mean(data[i,]))/sd(data[i,])
}
coldata=colData(reactivevalue$se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(shiny)
library(shiny)
library(shinyjs)
library(shinythemes)
require(SummarizedExperiment)
require(pheatmap)
require(ggplot2)
require(plotly)
require(EBSeq)
require(data.table)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
a=read.csv('data/counts.csv',header = T,row.names = 1)
b=head(a)
View(b)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages('reader')
library(reader)
get.delim('data/protein_data.csv')
runApp('inst/shiny')
runApp('inst/shiny')
get.delim('data/metadata.csv')
get.delim('data/metadata.csv',n = 100)
get.delim('data/metadata.csv',n = 100)
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
Counts=read.csv('data/counts.csv',header = T,row.names = 1)
Counts=Counts[rowSums(Counts)>0,]
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
color_palette= c(seq(-6, 6, by=0.1))
library(colorRampPalette)
install.packages('dichromat')
library(dichromat)
color_palette= c(seq(-6, 6, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(color_palette)/2))
breaks= c(seq(-6, 6, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(breaks)/2))
runApp('inst/shiny')
breaks= c(seq(-3, 3, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(breaks)/2))
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("/Users/jessmcc/Documents/workProjects/BatchQC")
install.packages("devtools")
install.packages("/Users/jessmcc/Documents/workProjects/BatchQC")
library(devtools)
install.packages("/Users/jessmcc/Documents/workProjects/BatchQC")
install.packages("~/Users/jessmcc/Documents/workProjects/BatchQC/", repos = NULL, type="source")
package_version("devtools")
package_version(devtools)
packageVersion("devtools")
install()
install()
Yes
install("/Users/jessmcc/Documents/workProjects/BatchQC")
library(BatchQC)
packageVersion("roxygen2")
install.packages(BiocStyle)
BiocManager::install("BiocStyle")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
proj_sitrep()
usethis::proj_sitrep()
proj_get()
usethis::proj_get()
install("/Users/jessmcc/Documents/workProjects/BatchQC")
install.packages("~/Users/jessmcc/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages(shinyjs)
install.packages("shinyjs")
BatchQC()
install.packages("shinythemes")
BatchQC()
install.packages("DT")
BatchQC()
install.packages("abind")
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
BatchQC()
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
packageVersion("shiny")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("animalcules")
library(animalcules)
library(SummarizedExperiment)
run_animalcules()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
run_animalcules()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BatchQC()
load("/Users/jessmcc/Downloads/protein_example_data.rda")
View(protein_data)
View(protein_sample_info)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
BiocCheck(BatchQC)
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BiocCheck(BatchQC)
BiocCheck("BatchQC")
BiocCheck("~/Documents/workProjects/BatchQC")
library(BiocCheck)
BiocCheck("~/Documents/workProjects/BatchQC")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BiocCheck("~/Documents/workProjects/BatchQC")
library(animalcules)
run_animalcules()
run_animalcules()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
run_animalcules()
run_animalcules()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
run_animalcules()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
system.file("data/protein_data.rda", package = "BatchQC")
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
file.exists("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BatchQC/data/protein_data.rda")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
read.table("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BatchQC/data/protein_data.rda")
read.table("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BatchQC/data/protein_data.rda", header = TRUE, row.names = 1, sep = get.delim("/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BatchQC/data/protein_data.rda", n = 10, delims = c('\t', ',')), check.names = FALSE)
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
View(protein_sample_info)
library(BatchQC)
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
type(protein_data)
library(BiocCheck)
BiocCheck("~/Documents/workProjects/BatchQC/")
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
View(protein_data)
library(BiocCheck)
BatchQC()
library(BatchQC)
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
data(protein_data)
BatchQC()
data("protein_data")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
data("protein_data")
BatchQC()
library(BatchQC)
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
BatchQC()
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
View(protein_data)
save(protein_data, file = "protein_data.rds")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
2+6
update.packages()
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
?readRDS
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
sample <- readRDS("/Users/jessmcc/Documents/workProjects/BatchQC/data/protein_data.rds")
install.packages("~/Documents/workProjects/BatchQC/", repos = NULL, type="source")
library(BatchQC)
BatchQC()
